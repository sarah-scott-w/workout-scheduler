# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  aws:
    runs-on: ubuntu-latest
    outputs:
      env-name: ${{ steps.env-name.outputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # dump github context to see what git info we have available
      - name: Dump github context
        run:   echo "$GITHUB_CONTEXT"
        shell: bash
        env:
         GITHUB_CONTEXT: ${{ toJson(github) }}

      # log in and get environment name
      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: eu-west-2

      - name: Configure AWS Resource Names
        id: resource-names
        env:
          REPO: ${{ github.repository }}
        run: |
          PROJECT_NAME=`echo $REPO | tr "/" "-"`
          echo "Project name: ${PROJECT_NAME}"
          echo "::set-output name=environment::${PROJECT_NAME}"
          echo "::set-output name=stack_name::${PROJECT_NAME}-cloudformation-stack"
          echo "::set-output name=programs_table_name::${PROJECT_NAME}-programs"
          echo "::set-output name=ecr_repo_name::${PROJECT_NAME}-repo"

      # Deploy cloudformation stack
      - name: Deploy to AWS CloudFormation
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: ${{ steps.resource-names.outputs.stack_name }}
          template: cloudformation/stack.json
          tags: [{\"Key\": \"Creator\", \"Value\": \"Sarah\"},{\"Key\": \"GitRepo\", \"Value\": \"${{ steps.resource-names.outputs.programs_table_name }}\"}]
          no-fail-on-empty-changeset: "1"
          parameter-overrides: >-
            DynamoTableNameParameter=${{ steps.resource-names.outputs.programs_table_name }},
            ECRRepoNameParameter=${{ steps.resource-names.outputs.ecr_repo_name }}

      # push image to ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ steps.resource-names.outputs.ecr_repo_name }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG